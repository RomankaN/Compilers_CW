
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\004\000\002\002\005\000\002\005" +
    "\007\000\002\006\004\000\002\006\002\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\006\000" +
    "\002\007\003\000\002\007\003\000\002\003\005\000\002" +
    "\003\002\000\002\060\003\000\002\060\004\000\002\061" +
    "\005\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\012\014\000\002\011\007\000" +
    "\002\011\004\000\002\010\005\000\002\010\003\000\002" +
    "\013\007\000\002\014\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\056\007" +
    "\000\002\056\006\000\002\056\006\000\002\056\005\000" +
    "\002\053\004\000\002\053\005\000\002\046\003\000\002" +
    "\046\002\000\002\047\004\000\002\047\004\000\002\047" +
    "\004\000\002\045\004\000\002\054\005\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\026\004\000\002\026\006\000\002\026" +
    "\004\000\002\026\005\000\002\026\004\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\027\007\000\002\022\006\000\002" +
    "\022\006\000\002\030\005\000\002\031\003\000\002\031" +
    "\002\000\002\032\003\000\002\032\005\000\002\021\010" +
    "\000\002\033\005\000\002\034\003\000\002\034\002\000" +
    "\002\035\005\000\002\035\007\000\002\036\003\000\002" +
    "\036\002\000\002\037\005\000\002\037\003\000\002\040" +
    "\004\000\002\040\004\000\002\041\006\000\002\042\003" +
    "\000\002\042\003\000\002\042\002\000\002\051\012\000" +
    "\002\052\005\000\002\052\003\000\002\055\005\000\002" +
    "\055\002\000\002\050\004\000\002\050\003\000\002\044" +
    "\004\000\002\044\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\034\017\ufff5\021\005\022\007\023\010\036" +
    "\030\040\012\041\021\042\026\043\006\044\024\045\032" +
    "\046\017\071\014\001\002\000\004\020\354\001\002\000" +
    "\004\071\340\001\002\000\014\006\uffb6\011\uffb6\020\uffb6" +
    "\063\uffb6\071\uffb6\001\002\000\004\071\324\001\002\000" +
    "\022\036\030\040\012\041\021\042\026\043\006\044\024" +
    "\045\032\046\017\001\002\000\006\063\uffae\071\uffae\001" +
    "\002\000\014\006\uffb9\011\uffb9\020\uffb9\063\uffb9\071\uffb9" +
    "\001\002\000\014\006\uffb3\011\uffb3\020\uffb3\063\uffb3\071" +
    "\uffb3\001\002\000\006\014\121\071\uffad\001\002\000\004" +
    "\002\321\001\002\000\004\020\ufff1\001\002\000\014\006" +
    "\uffb4\011\uffb4\020\uffb4\063\uffb4\071\uffb4\001\002\000\004" +
    "\020\ufff0\001\002\000\014\006\uffb8\011\uffb8\020\uffb8\063" +
    "\uffb8\071\uffb8\001\002\000\004\017\052\001\002\000\004" +
    "\020\uffee\001\002\000\014\006\uffb5\011\uffb5\020\uffb5\063" +
    "\uffb5\071\uffb5\001\002\000\004\071\050\001\002\000\004" +
    "\005\042\001\002\000\014\006\uffb7\011\uffb7\020\uffb7\063" +
    "\uffb7\071\uffb7\001\002\000\004\005\033\001\002\000\004" +
    "\020\uffef\001\002\000\014\006\uffb2\011\uffb2\020\uffb2\063" +
    "\uffb2\071\uffb2\001\002\000\026\036\030\037\037\040\012" +
    "\041\021\042\026\043\006\044\024\045\032\046\017\071" +
    "\036\001\002\000\004\006\041\001\002\000\006\006\uffab" +
    "\011\uffab\001\002\000\004\006\040\001\002\000\006\006" +
    "\uffac\011\uffac\001\002\000\014\006\uffa7\011\uffa7\020\uffa7" +
    "\063\uffa7\071\uffa7\001\002\000\014\006\uffa8\011\uffa8\020" +
    "\uffa8\063\uffa8\071\uffa8\001\002\000\026\036\030\037\037" +
    "\040\012\041\021\042\026\043\006\044\024\045\032\046" +
    "\017\071\044\001\002\000\004\011\045\001\002\000\006" +
    "\006\uffaa\011\uffaa\001\002\000\026\036\030\037\037\040" +
    "\012\041\021\042\026\043\006\044\024\045\032\046\017" +
    "\071\044\001\002\000\004\006\047\001\002\000\014\006" +
    "\uffa1\011\uffa1\020\uffa1\063\uffa1\071\uffa1\001\002\000\004" +
    "\020\uffeb\001\002\000\034\002\ufff5\021\005\022\007\023" +
    "\010\036\030\040\012\041\021\042\026\043\006\044\024" +
    "\045\032\046\017\071\014\001\002\000\004\012\053\001" +
    "\002\000\070\007\057\012\107\015\063\024\102\026\073" +
    "\027\072\030\061\031\112\032\062\033\070\035\055\036" +
    "\030\040\012\041\021\042\026\043\006\044\024\045\032" +
    "\046\017\055\064\067\066\070\114\071\117\072\uff8d\076" +
    "\076\102\116\103\110\001\002\000\056\005\uffce\007\uffce" +
    "\010\uffce\011\uffce\013\uffce\014\uffce\016\uffce\020\uffce\026" +
    "\uffce\047\uffce\050\uffce\051\uffce\053\uffce\054\uffce\055\uffce" +
    "\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\064\uffce\066" +
    "\uffce\001\002\000\056\005\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\013\uffd0\014\uffd0\016\uffd0\020\uffd0\026\uffd0\047\uffd0\050" +
    "\uffd0\051\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\064\uffd0\066\uffd0\001\002\000" +
    "\056\005\uffcf\007\uffcf\010\uffcf\011\uffcf\013\uffcf\014\uffcf" +
    "\016\uffcf\020\uffcf\026\uffcf\047\uffcf\050\uffcf\051\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\062\uffcf\064\uffcf\066\uffcf\001\002\000\040\007\057\010" +
    "\uffa4\012\107\014\176\015\063\027\072\030\061\031\112" +
    "\032\062\033\070\035\055\055\064\067\066\070\114\071" +
    "\132\001\002\000\064\007\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033" +
    "\ufff7\035\ufff7\055\ufff7\067\ufff7\070\ufff7\071\ufff7\072\ufff7" +
    "\073\ufff7\074\ufff7\075\ufff7\076\ufff7\077\ufff7\100\ufff7\102" +
    "\ufff7\103\ufff7\001\002\000\054\005\uffd5\010\uffd5\011\uffd5" +
    "\013\uffd5\014\uffd5\016\uffd5\020\uffd5\026\uffd5\047\uffd5\050" +
    "\uffd5\051\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5" +
    "\060\uffd5\061\uffd5\062\uffd5\064\uffd5\066\uffd5\001\002\000" +
    "\054\005\uffd3\010\uffd3\011\uffd3\013\uffd3\014\uffd3\016\uffd3" +
    "\020\uffd3\026\uffd3\047\uffd3\050\uffd3\051\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3" +
    "\064\uffd3\066\uffd3\001\002\000\034\007\057\012\107\015" +
    "\063\027\072\030\061\031\112\032\062\033\070\035\055" +
    "\055\064\067\066\070\114\071\132\001\002\000\034\007" +
    "\057\012\107\015\063\027\072\030\061\031\112\032\062" +
    "\033\070\035\055\055\064\067\066\070\114\071\132\001" +
    "\002\000\004\072\301\001\002\000\034\007\057\012\107" +
    "\015\063\027\072\030\061\031\112\032\062\033\070\035" +
    "\055\055\064\067\066\070\114\071\132\001\002\000\004" +
    "\020\276\001\002\000\054\005\uffd2\010\uffd2\011\uffd2\013" +
    "\uffd2\014\uffd2\016\uffd2\020\uffd2\026\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\062\uffd2\064\uffd2\066\uffd2\001\002\000\054" +
    "\005\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\016\uffe5\020" +
    "\uffe5\026\uffe5\047\uffe5\050\uffe5\051\uffe5\053\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\062\uffe5\064" +
    "\uffe5\066\uffe5\001\002\000\054\005\uffd1\010\uffd1\011\uffd1" +
    "\013\uffd1\014\uffd1\016\uffd1\020\uffd1\026\uffd1\047\uffd1\050" +
    "\uffd1\051\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\060\uffd1\061\uffd1\062\uffd1\064\uffd1\066\uffd1\001\002\000" +
    "\034\007\057\012\107\015\063\027\072\030\061\031\112" +
    "\032\062\033\070\035\055\055\064\067\066\070\114\071" +
    "\132\001\002\000\054\005\uffe6\010\uffe6\011\uffe6\013\uffe6" +
    "\014\uffe6\016\uffe6\020\uffe6\026\uffe6\047\uffe6\050\uffe6\051" +
    "\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\057\uffe6\060\uffe6" +
    "\061\uffe6\062\uffe6\064\uffe6\066\uffe6\001\002\000\004\020" +
    "\273\001\002\000\056\007\ufffd\012\ufffd\015\ufffd\024\ufffd" +
    "\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\035" +
    "\ufffd\055\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\075\ufffd" +
    "\076\ufffd\077\ufffd\100\ufffd\102\ufffd\103\ufffd\001\002\000" +
    "\004\013\264\001\002\000\040\005\145\020\263\047\141" +
    "\050\151\051\150\053\143\054\154\055\140\056\144\057" +
    "\146\060\155\061\152\062\147\064\142\066\153\001\002" +
    "\000\052\007\ufffd\012\ufffd\013\ufffd\015\ufffd\024\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\035\ufffd" +
    "\055\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\076\ufffd\102" +
    "\ufffd\103\ufffd\001\002\000\036\007\057\012\107\015\063" +
    "\020\uff8b\027\072\030\061\031\112\032\062\033\070\035" +
    "\055\055\064\067\066\070\114\071\132\001\002\000\042" +
    "\005\uffe4\020\uffe4\047\uffe4\050\uffe4\051\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\063\255\064\uffe4\066\uffe4\001\002\000\054\005\uffba\010" +
    "\uffba\011\uffba\013\uffba\014\uffba\016\uffba\020\uffba\026\uffba" +
    "\047\uffba\050\uffba\051\uffba\053\uffba\054\uffba\055\uffba\056" +
    "\uffba\057\uffba\060\uffba\061\uffba\062\uffba\064\uffba\066\uffba" +
    "\001\002\000\064\007\ufff8\012\ufff8\013\ufff8\015\ufff8\024" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8" +
    "\035\ufff8\055\ufff8\067\ufff8\070\ufff8\071\ufff8\072\ufff8\073" +
    "\ufff8\074\ufff8\075\ufff8\076\ufff8\077\ufff8\100\ufff8\102\ufff8" +
    "\103\ufff8\001\002\000\056\005\uffe3\007\240\010\uffe3\011" +
    "\uffe3\013\uffe3\014\uffe3\016\uffe3\020\uffe3\026\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\053\uffe3\054\uffe3\055\uffe3\056\uffe3\057" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\064\uffe3\066\uffe3\001\002" +
    "\000\036\007\057\012\107\013\uff9e\015\063\027\072\030" +
    "\061\031\112\032\062\033\070\035\055\055\064\067\066" +
    "\070\114\071\132\001\002\000\012\007\234\012\107\035" +
    "\055\071\232\001\002\000\004\013\ufff4\001\002\000\054" +
    "\005\uffd4\010\uffd4\011\uffd4\013\uffd4\014\uffd4\016\uffd4\020" +
    "\uffd4\026\uffd4\047\uffd4\050\uffd4\051\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\064" +
    "\uffd4\066\uffd4\001\002\000\060\005\uffdb\007\127\010\uffdb" +
    "\011\uffdb\013\uffdb\014\uffdb\016\uffdb\020\uffdb\026\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\062\uffdb\064\uffdb\065\124\066" +
    "\uffdb\001\002\000\004\015\225\001\002\000\004\020\224" +
    "\001\002\000\034\007\057\012\107\015\063\027\072\030" +
    "\061\031\112\032\062\033\070\035\055\055\064\067\066" +
    "\070\114\071\132\001\002\000\054\005\uffdb\007\127\014" +
    "\121\015\130\020\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb" +
    "\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\065\124\066\uffdb\071\uffad\001\002" +
    "\000\062\005\uffdb\007\127\010\uffdb\011\uffdb\013\uffdb\014" +
    "\uffdb\016\uffdb\020\uffdb\026\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\062\uffdb\063\uffdb\064\uffdb\065\124\066\uffdb\001\002" +
    "\000\024\036\030\040\012\041\021\042\026\043\006\044" +
    "\024\045\032\046\017\071\214\001\002\000\056\005\uffde" +
    "\010\uffde\011\uffde\013\uffde\014\uffde\016\uffde\020\uffde\026" +
    "\uffde\047\uffde\050\uffde\051\uffde\053\uffde\054\uffde\055\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064" +
    "\uffde\066\uffde\001\002\000\062\005\uffdb\007\127\010\uffdb" +
    "\011\uffdb\013\uffdb\014\uffdb\016\uffdb\020\uffdb\026\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065" +
    "\124\066\uffdb\001\002\000\004\071\211\001\002\000\056" +
    "\005\uffdc\010\uffdc\011\uffdc\013\uffdc\014\uffdc\016\uffdc\020" +
    "\uffdc\026\uffdc\047\uffdc\050\uffdc\051\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063" +
    "\uffdc\064\uffdc\066\uffdc\001\002\000\062\005\uffdb\007\127" +
    "\010\uffdb\011\uffdb\013\uffdb\014\uffdb\016\uffdb\020\uffdb\026" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064" +
    "\uffdb\065\124\066\uffdb\001\002\000\036\007\057\012\107" +
    "\014\176\015\063\027\072\030\061\031\112\032\062\033" +
    "\070\035\055\055\064\067\066\070\114\071\132\001\002" +
    "\000\036\007\057\012\107\015\063\016\uffa4\027\072\030" +
    "\061\031\112\032\062\033\070\035\055\055\064\067\066" +
    "\070\114\071\132\001\002\000\054\005\uffe4\010\uffe4\011" +
    "\uffe4\013\uffe4\014\uffe4\016\uffe4\020\uffe4\026\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\053\uffe4\054\uffe4\055\uffe4\056\uffe4\057" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\064\uffe4\066\uffe4\001\002" +
    "\000\064\005\uffdb\007\127\010\uffdb\011\uffdb\013\uffdb\014" +
    "\uffdb\015\130\016\uffdb\020\uffdb\026\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060" +
    "\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\124\066\uffdb" +
    "\001\002\000\010\010\uffa5\011\174\016\uffa5\001\002\000" +
    "\044\005\145\010\uffa3\011\uffa3\016\uffa3\047\141\050\151" +
    "\051\150\053\143\054\154\055\140\056\144\057\146\060" +
    "\155\061\152\062\147\064\142\066\153\001\002\000\004" +
    "\016\136\001\002\000\004\020\137\001\002\000\060\005" +
    "\uffa9\007\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\016\uffa9" +
    "\020\uffa9\026\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\056\uffa9\057\uffa9\060\uffa9\061\uffa9\062\uffa9" +
    "\064\uffa9\065\uffa9\066\uffa9\001\002\000\034\007\057\012" +
    "\107\015\063\027\072\030\061\031\112\032\062\033\070" +
    "\035\055\055\064\067\066\070\114\071\132\001\002\000" +
    "\034\007\057\012\107\015\063\027\072\030\061\031\112" +
    "\032\062\033\070\035\055\055\064\067\066\070\114\071" +
    "\132\001\002\000\034\007\057\012\107\015\063\027\072" +
    "\030\061\031\112\032\062\033\070\035\055\055\064\067" +
    "\066\070\114\071\132\001\002\000\034\007\057\012\107" +
    "\015\063\027\072\030\061\031\112\032\062\033\070\035" +
    "\055\055\064\067\066\070\114\071\132\001\002\000\034" +
    "\007\057\012\107\015\063\027\072\030\061\031\112\032" +
    "\062\033\070\035\055\055\064\067\066\070\114\071\132" +
    "\001\002\000\034\007\057\012\107\015\063\027\072\030" +
    "\061\031\112\032\062\033\070\035\055\055\064\067\066" +
    "\070\114\071\132\001\002\000\034\007\057\012\107\015" +
    "\063\027\072\030\061\031\112\032\062\033\070\035\055" +
    "\055\064\067\066\070\114\071\132\001\002\000\034\007" +
    "\057\012\107\015\063\027\072\030\061\031\112\032\062" +
    "\033\070\035\055\055\064\067\066\070\114\071\132\001" +
    "\002\000\034\007\057\012\107\015\063\027\072\030\061" +
    "\031\112\032\062\033\070\035\055\055\064\067\066\070" +
    "\114\071\132\001\002\000\034\007\057\012\107\015\063" +
    "\027\072\030\061\031\112\032\062\033\070\035\055\055" +
    "\064\067\066\070\114\071\132\001\002\000\034\007\057" +
    "\012\107\015\063\027\072\030\061\031\112\032\062\033" +
    "\070\035\055\055\064\067\066\070\114\071\132\001\002" +
    "\000\034\007\057\012\107\015\063\027\072\030\061\031" +
    "\112\032\062\033\070\035\055\055\064\067\066\070\114" +
    "\071\132\001\002\000\034\007\057\012\107\015\063\027" +
    "\072\030\061\031\112\032\062\033\070\035\055\055\064" +
    "\067\066\070\114\071\132\001\002\000\034\007\057\012" +
    "\107\015\063\027\072\030\061\031\112\032\062\033\070" +
    "\035\055\055\064\067\066\070\114\071\132\001\002\000" +
    "\054\005\145\010\uffbf\011\uffbf\013\uffbf\014\uffbf\016\uffbf" +
    "\020\uffbf\026\uffbf\047\uffbf\050\uffbf\051\150\053\143\054" +
    "\154\055\uffbf\056\uffbf\057\146\060\uffbf\061\uffbf\062\uffbf" +
    "\064\142\066\uffbf\001\002\000\044\010\uffc3\011\uffc3\013" +
    "\uffc3\014\uffc3\016\uffc3\020\uffc3\026\uffc3\047\uffc3\050\uffc3" +
    "\053\uffc3\055\uffc3\056\uffc3\060\uffc3\061\uffc3\062\uffc3\064" +
    "\uffc3\066\uffc3\001\002\000\054\005\145\010\uffbc\011\uffbc" +
    "\013\uffbc\014\uffbc\016\uffbc\020\uffbc\026\uffbc\047\uffbc\050" +
    "\uffbc\051\150\053\143\054\154\055\uffbc\056\uffbc\057\146" +
    "\060\uffbc\061\uffbc\062\uffbc\064\142\066\uffbc\001\002\000" +
    "\054\005\145\010\uffbb\011\uffbb\013\uffbb\014\uffbb\016\uffbb" +
    "\020\uffbb\026\uffbb\047\uffbb\050\uffbb\051\150\053\143\054" +
    "\154\055\uffbb\056\uffbb\057\146\060\uffbb\061\uffbb\062\uffbb" +
    "\064\142\066\uffbb\001\002\000\054\005\145\010\uffc7\011" +
    "\uffc7\013\uffc7\014\uffc7\016\uffc7\020\uffc7\026\uffc7\047\141" +
    "\050\uffc7\051\150\053\143\054\154\055\uffc7\056\uffc7\057" +
    "\146\060\155\061\152\062\uffc7\064\142\066\153\001\002" +
    "\000\044\010\uffc6\011\uffc6\013\uffc6\014\uffc6\016\uffc6\020" +
    "\uffc6\026\uffc6\047\uffc6\050\uffc6\053\uffc6\055\uffc6\056\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\064\uffc6\066\uffc6\001\002\000" +
    "\054\005\145\010\uffbe\011\uffbe\013\uffbe\014\uffbe\016\uffbe" +
    "\020\uffbe\026\uffbe\047\141\050\uffbe\051\150\053\143\054" +
    "\154\055\uffbe\056\uffbe\057\146\060\155\061\152\062\uffbe" +
    "\064\142\066\153\001\002\000\044\010\uffc0\011\uffc0\013" +
    "\uffc0\014\uffc0\016\uffc0\020\uffc0\026\uffc0\047\uffc0\050\uffc0" +
    "\053\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\062\uffc0\064" +
    "\uffc0\066\uffc0\001\002\000\044\010\uffc4\011\uffc4\013\uffc4" +
    "\014\uffc4\016\uffc4\020\uffc4\026\uffc4\047\uffc4\050\uffc4\053" +
    "\uffc4\055\uffc4\056\uffc4\060\uffc4\061\uffc4\062\uffc4\064\uffc4" +
    "\066\uffc4\001\002\000\054\005\145\010\uffc1\011\uffc1\013" +
    "\uffc1\014\uffc1\016\uffc1\020\uffc1\026\uffc1\047\141\050\uffc1" +
    "\051\150\053\143\054\154\055\uffc1\056\uffc1\057\146\060" +
    "\155\061\152\062\uffc1\064\142\066\153\001\002\000\054" +
    "\005\145\010\uffc5\011\uffc5\013\uffc5\014\uffc5\016\uffc5\020" +
    "\uffc5\026\uffc5\047\uffc5\050\uffc5\051\150\053\143\054\154" +
    "\055\uffc5\056\uffc5\057\146\060\uffc5\061\uffc5\062\uffc5\064" +
    "\142\066\uffc5\001\002\000\054\005\145\010\uffbd\011\uffbd" +
    "\013\uffbd\014\uffbd\016\uffbd\020\uffbd\026\uffbd\047\uffbd\050" +
    "\uffbd\051\150\053\143\054\154\055\uffbd\056\uffbd\057\146" +
    "\060\uffbd\061\uffbd\062\uffbd\064\142\066\uffbd\001\002\000" +
    "\054\005\145\010\uffc8\011\uffc8\013\uffc8\014\uffc8\016\uffc8" +
    "\020\uffc8\026\uffc8\047\uffc8\050\uffc8\051\150\053\143\054" +
    "\154\055\uffc8\056\uffc8\057\146\060\uffc8\061\uffc8\062\uffc8" +
    "\064\142\066\uffc8\001\002\000\054\005\145\010\uffc2\011" +
    "\uffc2\013\uffc2\014\uffc2\016\uffc2\020\uffc2\026\uffc2\047\141" +
    "\050\uffc2\051\150\053\143\054\154\055\uffc2\056\uffc2\057" +
    "\146\060\155\061\152\062\uffc2\064\142\066\153\001\002" +
    "\000\034\007\057\012\107\015\063\027\072\030\061\031" +
    "\112\032\062\033\070\035\055\055\064\067\066\070\114" +
    "\071\132\001\002\000\044\005\145\010\uffa2\011\uffa2\016" +
    "\uffa2\047\141\050\151\051\150\053\143\054\154\055\140" +
    "\056\144\057\146\060\155\061\152\062\147\064\142\066" +
    "\153\001\002\000\036\007\057\010\205\012\107\015\063" +
    "\027\072\030\061\031\112\032\062\033\070\035\055\055" +
    "\064\067\066\070\114\071\132\001\002\000\042\005\145" +
    "\010\201\014\200\047\141\050\151\051\150\053\143\054" +
    "\154\055\140\056\144\057\146\060\155\061\152\062\147" +
    "\064\142\066\153\001\002\000\036\007\057\010\202\012" +
    "\107\015\063\027\072\030\061\031\112\032\062\033\070" +
    "\035\055\055\064\067\066\070\114\071\132\001\002\000" +
    "\062\005\uffd6\007\uffd6\010\uffd6\011\uffd6\013\uffd6\014\uffd6" +
    "\016\uffd6\020\uffd6\026\uffd6\047\uffd6\050\uffd6\051\uffd6\053" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\001\002\000" +
    "\062\005\uffe0\007\uffe0\010\uffe0\011\uffe0\013\uffe0\014\uffe0" +
    "\016\uffe0\020\uffe0\026\uffe0\047\uffe0\050\uffe0\051\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\001\002\000" +
    "\040\005\145\010\204\047\141\050\151\051\150\053\143" +
    "\054\154\055\140\056\144\057\146\060\155\061\152\062" +
    "\147\064\142\066\153\001\002\000\062\005\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\013\uffe2\014\uffe2\016\uffe2\020\uffe2\026" +
    "\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\054\uffe2\055\uffe2" +
    "\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\065\uffe2\066\uffe2\001\002\000\062\005\uffdf\007\uffdf" +
    "\010\uffdf\011\uffdf\013\uffdf\014\uffdf\016\uffdf\020\uffdf\026" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064" +
    "\uffdf\065\uffdf\066\uffdf\001\002\000\040\005\145\010\207" +
    "\047\141\050\151\051\150\053\143\054\154\055\140\056" +
    "\144\057\146\060\155\061\152\062\147\064\142\066\153" +
    "\001\002\000\062\005\uffe1\007\uffe1\010\uffe1\011\uffe1\013" +
    "\uffe1\014\uffe1\016\uffe1\020\uffe1\026\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\053\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1" +
    "\001\002\000\056\005\uffd8\010\uffd8\011\uffd8\013\uffd8\014" +
    "\uffd8\016\uffd8\020\uffd8\026\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061" +
    "\uffd8\062\uffd8\063\uffd8\064\uffd8\066\uffd8\001\002\000\062" +
    "\005\uffd7\007\uffd7\010\uffd7\011\uffd7\013\uffd7\014\uffd7\016" +
    "\uffd7\020\uffd7\026\uffd7\047\uffd7\050\uffd7\051\uffd7\053\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\065\uffd7\066\uffd7\001\002\000\056" +
    "\005\uffd9\010\uffd9\011\uffd9\013\uffd9\014\uffd9\016\uffd9\020" +
    "\uffd9\026\uffd9\047\uffd9\050\uffd9\051\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062\uffd9\063" +
    "\uffd9\064\uffd9\066\uffd9\001\002\000\004\063\215\001\002" +
    "\000\004\063\uffad\001\002\000\034\007\057\012\107\015" +
    "\063\027\072\030\061\031\112\032\062\033\070\035\055" +
    "\055\064\067\066\070\114\071\132\001\002\000\006\011" +
    "\220\020\uffec\001\002\000\042\005\145\011\uffe9\020\uffe9" +
    "\047\141\050\151\051\150\053\143\054\154\055\140\056" +
    "\144\057\146\060\155\061\152\062\147\064\142\066\153" +
    "\001\002\000\034\007\057\012\107\015\063\027\072\030" +
    "\061\031\112\032\062\033\070\035\055\055\064\067\066" +
    "\070\114\071\132\001\002\000\042\005\145\011\uffea\020" +
    "\uffea\047\141\050\151\051\150\053\143\054\154\055\140" +
    "\056\144\057\146\060\155\061\152\062\147\064\142\066" +
    "\153\001\002\000\056\005\uffda\010\uffda\011\uffda\013\uffda" +
    "\014\uffda\016\uffda\020\uffda\026\uffda\047\uffda\050\uffda\051" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda" +
    "\061\uffda\062\uffda\063\uffda\064\uffda\066\uffda\001\002\000" +
    "\040\005\145\020\uff8a\047\141\050\151\051\150\053\143" +
    "\054\154\055\140\056\144\057\146\060\155\061\152\062" +
    "\147\064\142\066\153\001\002\000\064\007\ufffb\012\ufffb" +
    "\013\ufffb\015\ufffb\024\ufffb\026\ufffb\027\ufffb\030\ufffb\031" +
    "\ufffb\032\ufffb\033\ufffb\035\ufffb\055\ufffb\067\ufffb\070\ufffb" +
    "\071\ufffb\072\ufffb\073\ufffb\074\ufffb\075\ufffb\076\ufffb\077" +
    "\ufffb\100\ufffb\102\ufffb\103\ufffb\001\002\000\034\007\057" +
    "\012\107\015\063\027\072\030\061\031\112\032\062\033" +
    "\070\035\055\055\064\067\066\070\114\071\132\001\002" +
    "\000\040\005\145\016\227\047\141\050\151\051\150\053" +
    "\143\054\154\055\140\056\144\057\146\060\155\061\152" +
    "\062\147\064\142\066\153\001\002\000\054\005\uffcc\010" +
    "\uffcc\011\uffcc\013\uffcc\014\uffcc\016\uffcc\020\uffcc\026\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\064\uffcc\066\uffcc" +
    "\001\002\000\054\005\uffc9\010\uffc9\011\uffc9\013\uffc9\014" +
    "\uffc9\016\uffc9\020\uffc9\026\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\061" +
    "\uffc9\062\uffc9\064\uffc9\066\uffc9\001\002\000\004\020\uff89" +
    "\001\002\000\010\007\127\020\uffdb\065\124\001\002\000" +
    "\004\007\240\001\002\000\036\007\057\010\uffa4\012\107" +
    "\015\063\027\072\030\061\031\112\032\062\033\070\035" +
    "\055\055\064\067\066\070\114\071\132\001\002\000\004" +
    "\010\236\001\002\000\056\005\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\013\uffa6\014\uffa6\016\uffa6\020\uffa6\026\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057" +
    "\uffa6\060\uffa6\061\uffa6\062\uffa6\064\uffa6\066\uffa6\001\002" +
    "\000\006\007\127\065\124\001\002\000\034\007\057\012" +
    "\107\015\063\027\072\030\061\031\112\032\062\033\070" +
    "\035\055\055\064\067\066\070\114\071\132\001\002\000" +
    "\040\005\145\010\201\047\141\050\151\051\150\053\143" +
    "\054\154\055\140\056\144\057\146\060\155\061\152\062" +
    "\147\064\142\066\153\001\002\000\056\005\uffdd\010\uffdd" +
    "\011\uffdd\013\uffdd\014\uffdd\016\uffdd\020\uffdd\026\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\066" +
    "\uffdd\001\002\000\040\005\145\014\253\047\141\050\151" +
    "\051\150\053\143\054\154\055\140\056\144\057\146\060" +
    "\155\061\152\062\147\064\142\066\153\001\002\000\004" +
    "\013\252\001\002\000\006\011\246\013\uff9f\001\002\000" +
    "\034\007\057\012\107\015\063\027\072\030\061\031\112" +
    "\032\062\033\070\035\055\055\064\067\066\070\114\071" +
    "\132\001\002\000\040\005\145\014\250\047\141\050\151" +
    "\051\150\053\143\054\154\055\140\056\144\057\146\060" +
    "\155\061\152\062\147\064\142\066\153\001\002\000\034" +
    "\007\057\012\107\015\063\027\072\030\061\031\112\032" +
    "\062\033\070\035\055\055\064\067\066\070\114\071\132" +
    "\001\002\000\042\005\145\011\uff9c\013\uff9c\047\141\050" +
    "\151\051\150\053\143\054\154\055\140\056\144\057\146" +
    "\060\155\061\152\062\147\064\142\066\153\001\002\000" +
    "\056\005\uffa0\007\uffa0\010\uffa0\011\uffa0\013\uffa0\014\uffa0" +
    "\016\uffa0\020\uffa0\026\uffa0\047\uffa0\050\uffa0\051\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\057\uffa0\060\uffa0\061\uffa0" +
    "\062\uffa0\064\uffa0\066\uffa0\001\002\000\034\007\057\012" +
    "\107\015\063\027\072\030\061\031\112\032\062\033\070" +
    "\035\055\055\064\067\066\070\114\071\132\001\002\000" +
    "\042\005\145\011\uff9d\013\uff9d\047\141\050\151\051\150" +
    "\053\143\054\154\055\140\056\144\057\146\060\155\061" +
    "\152\062\147\064\142\066\153\001\002\000\034\007\057" +
    "\012\107\015\063\027\072\030\061\031\112\032\062\033" +
    "\070\035\055\055\064\067\066\070\114\071\132\001\002" +
    "\000\006\011\220\020\257\001\002\000\064\007\ufff9\012" +
    "\ufff9\013\ufff9\015\ufff9\024\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\035\ufff9\055\ufff9\067\ufff9\070" +
    "\ufff9\071\ufff9\072\ufff9\073\ufff9\074\ufff9\075\ufff9\076\ufff9" +
    "\077\ufff9\100\ufff9\102\ufff9\103\ufff9\001\002\000\040\005" +
    "\145\020\uff8c\047\141\050\151\051\150\053\143\054\154" +
    "\055\140\056\144\057\146\060\155\061\152\062\147\064" +
    "\142\066\153\001\002\000\052\007\057\012\107\013\ufff3" +
    "\015\063\024\102\026\073\027\072\030\061\031\112\032" +
    "\062\033\070\035\055\055\064\067\066\070\114\071\132" +
    "\072\uff8d\076\076\102\116\103\110\001\002\000\064\007" +
    "\ufffe\012\ufffe\013\ufffe\015\ufffe\024\ufffe\026\ufffe\027\ufffe" +
    "\030\ufffe\031\ufffe\032\ufffe\033\ufffe\035\ufffe\055\ufffe\067" +
    "\ufffe\070\ufffe\071\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe" +
    "\076\ufffe\077\ufffe\100\ufffe\102\ufffe\103\ufffe\001\002\000" +
    "\064\007\ufffa\012\ufffa\013\ufffa\015\ufffa\024\ufffa\026\ufffa" +
    "\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\035\ufffa\055" +
    "\ufffa\067\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\074\ufffa" +
    "\075\ufffa\076\ufffa\077\ufffa\100\ufffa\102\ufffa\103\ufffa\001" +
    "\002\000\004\020\265\001\002\000\034\002\uffff\021\uffff" +
    "\022\uffff\023\uffff\036\uffff\040\uffff\041\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\046\uffff\071\uffff\001\002\000\056" +
    "\007\057\012\107\015\063\024\102\026\073\027\072\030" +
    "\061\031\112\032\062\033\070\035\055\055\064\067\066" +
    "\070\114\071\132\072\uff8d\075\uff92\076\076\077\270\100" +
    "\271\102\116\103\110\001\002\000\004\075\272\001\002" +
    "\000\004\075\uff94\001\002\000\004\075\uff93\001\002\000" +
    "\064\007\uff95\012\uff95\013\uff95\015\uff95\024\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\032\uff95\033\uff95\035\uff95\055" +
    "\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073\uff95\074\uff95" +
    "\075\uff95\076\uff95\077\uff95\100\uff95\102\uff95\103\uff95\001" +
    "\002\000\064\007\ufffc\012\ufffc\013\ufffc\015\ufffc\024\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc\035" +
    "\ufffc\055\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc" +
    "\074\ufffc\075\ufffc\076\ufffc\077\ufffc\100\ufffc\102\ufffc\103" +
    "\ufffc\001\002\000\040\005\145\026\275\047\141\050\151" +
    "\051\150\053\143\054\154\055\140\056\144\057\146\060" +
    "\155\061\152\062\147\064\142\066\153\001\002\000\004" +
    "\072\uff8e\001\002\000\070\007\057\012\107\015\063\024" +
    "\102\026\073\027\072\030\061\031\112\032\062\033\070" +
    "\035\055\036\030\040\012\041\021\042\026\043\006\044" +
    "\024\045\032\046\017\055\064\067\066\070\114\071\117" +
    "\072\uff8d\076\076\102\116\103\110\001\002\000\004\013" +
    "\ufff2\001\002\000\044\010\uffcd\011\uffcd\013\uffcd\014\uffcd" +
    "\016\uffcd\020\uffcd\026\uffcd\047\uffcd\050\uffcd\053\uffcd\055" +
    "\uffcd\056\uffcd\060\uffcd\061\uffcd\062\uffcd\064\uffcd\066\uffcd" +
    "\001\002\000\004\015\302\001\002\000\034\007\057\012" +
    "\107\015\063\027\072\030\061\031\112\032\062\033\070" +
    "\035\055\055\064\067\066\070\114\071\132\001\002\000" +
    "\040\005\145\016\304\047\141\050\151\051\150\053\143" +
    "\054\154\055\140\056\144\057\146\060\155\061\152\062" +
    "\147\064\142\066\153\001\002\000\004\101\305\001\002" +
    "\000\054\007\ufffd\012\ufffd\015\ufffd\024\ufffd\026\ufffd\027" +
    "\ufffd\030\ufffd\031\ufffd\032\ufffd\033\ufffd\035\ufffd\055\ufffd" +
    "\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\ufffd\076" +
    "\ufffd\102\ufffd\103\ufffd\001\002\000\054\007\057\012\107" +
    "\015\063\024\102\026\073\027\072\030\061\031\112\032" +
    "\062\033\070\035\055\055\064\067\066\070\114\071\132" +
    "\072\uff8d\073\310\074\311\076\076\102\116\103\110\001" +
    "\002\000\064\007\uff91\012\uff91\013\uff91\015\uff91\024\uff91" +
    "\026\uff91\027\uff91\030\uff91\031\uff91\032\uff91\033\uff91\035" +
    "\uff91\055\uff91\067\uff91\070\uff91\071\uff91\072\uff91\073\uff91" +
    "\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91\102\uff91\103" +
    "\uff91\001\002\000\064\007\uff8f\012\uff8f\013\uff8f\015\uff8f" +
    "\024\uff8f\026\uff8f\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033" +
    "\uff8f\035\uff8f\055\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f" +
    "\073\uff8f\074\uff8f\075\uff8f\076\uff8f\077\uff8f\100\uff8f\102" +
    "\uff8f\103\uff8f\001\002\000\052\007\ufffd\012\ufffd\015\ufffd" +
    "\024\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\035\ufffd\055\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd" +
    "\073\ufffd\076\ufffd\102\ufffd\103\ufffd\001\002\000\052\007" +
    "\057\012\107\015\063\024\102\026\073\027\072\030\061" +
    "\031\112\032\062\033\070\035\055\055\064\067\066\070" +
    "\114\071\132\072\uff8d\073\313\076\076\102\116\103\110" +
    "\001\002\000\064\007\uff90\012\uff90\013\uff90\015\uff90\024" +
    "\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90" +
    "\035\uff90\055\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\074\uff90\075\uff90\076\uff90\077\uff90\100\uff90\102\uff90" +
    "\103\uff90\001\002\000\054\005\145\010\uffcb\011\uffcb\013" +
    "\uffcb\014\uffcb\016\uffcb\020\uffcb\026\uffcb\047\141\050\uffcb" +
    "\051\150\053\143\054\154\055\uffcb\056\uffcb\057\146\060" +
    "\155\061\152\062\uffcb\064\142\066\153\001\002\000\040" +
    "\005\145\016\316\047\141\050\151\051\150\053\143\054" +
    "\154\055\140\056\144\057\146\060\155\061\152\062\147" +
    "\064\142\066\153\001\002\000\054\005\uffca\010\uffca\011" +
    "\uffca\013\uffca\014\uffca\016\uffca\020\uffca\026\uffca\047\uffca" +
    "\050\uffca\051\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057" +
    "\uffca\060\uffca\061\uffca\062\uffca\064\uffca\066\uffca\001\002" +
    "\000\044\005\145\010\uffa3\011\uffa3\014\200\047\141\050" +
    "\151\051\150\053\143\054\154\055\140\056\144\057\146" +
    "\060\155\061\152\062\147\064\142\066\153\001\002\000" +
    "\004\002\000\001\002\000\004\002\001\001\002\000\004" +
    "\071\323\001\002\000\004\020\uffe7\001\002\000\004\012" +
    "\325\001\002\000\026\013\uff9a\036\030\040\012\041\021" +
    "\042\026\043\006\044\024\045\032\046\017\071\332\001" +
    "\002\000\010\011\336\013\uff9b\016\uff9b\001\002\000\004" +
    "\071\335\001\002\000\004\013\334\001\002\000\010\011" +
    "\uff98\013\uff98\016\uff98\001\002\000\004\071\333\001\002" +
    "\000\010\011\uff96\013\uff96\016\uff96\001\002\000\004\020" +
    "\uffe8\001\002\000\010\011\uff97\013\uff97\016\uff97\001\002" +
    "\000\024\036\030\040\012\041\021\042\026\043\006\044" +
    "\024\045\032\046\017\071\332\001\002\000\010\011\uff99" +
    "\013\uff99\016\uff99\001\002\000\004\015\341\001\002\000" +
    "\026\016\uff9a\036\030\040\012\041\021\042\026\043\006" +
    "\044\024\045\032\046\017\071\332\001\002\000\004\016" +
    "\343\001\002\000\004\012\344\001\002\000\070\007\057" +
    "\012\107\015\063\024\102\026\073\027\072\030\061\031" +
    "\112\032\062\033\070\035\055\036\030\040\012\041\021" +
    "\042\026\043\006\044\024\045\032\046\017\055\064\067" +
    "\066\070\114\071\117\072\uff8d\076\076\102\116\103\110" +
    "\001\002\000\004\013\346\001\002\000\004\014\347\001" +
    "\002\000\026\025\350\036\030\040\012\041\021\042\026" +
    "\043\006\044\024\045\032\046\017\071\352\001\002\000" +
    "\004\020\uffb0\001\002\000\004\020\uffaf\001\002\000\004" +
    "\020\uffb1\001\002\000\004\020\uffed\001\002\000\036\002" +
    "\ufff5\017\ufff5\021\005\022\007\023\010\036\030\040\012" +
    "\041\021\042\026\043\006\044\024\045\032\046\017\071" +
    "\014\001\002\000\006\002\ufff6\017\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\353\000\030\002\014\003\021\004\003\011\017\012" +
    "\015\013\022\014\030\017\010\021\026\022\012\024\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\017\321\021\026\022\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\017\034\020\033\021\026\022\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\017\034\020" +
    "\042\021\026\022\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\017\034\020\045\021\026\022\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\317\004\003\011\017\012\015\013\022\014" +
    "\030\017\010\021\026\022\012\024\024\001\001\000\002" +
    "\001\001\000\056\007\100\011\066\015\105\016\103\017" +
    "\010\021\026\022\012\024\024\025\077\026\073\027\112" +
    "\030\053\033\055\041\057\044\074\050\114\051\104\053" +
    "\102\055\064\056\070\060\076\061\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\015" +
    "\105\016\103\025\316\026\073\027\112\030\053\031\234" +
    "\032\132\033\055\053\130\056\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\105" +
    "\016\103\025\314\026\073\027\112\030\053\033\055\053" +
    "\130\056\070\001\001\000\024\015\105\016\103\025\313" +
    "\026\073\027\112\030\053\033\055\053\130\056\070\001" +
    "\001\000\002\001\001\000\024\015\105\016\103\025\277" +
    "\026\073\027\112\030\053\033\055\053\130\056\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\015\105\016\103\025\273\026" +
    "\073\027\112\030\053\033\055\053\130\056\070\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\260" +
    "\001\001\000\024\015\105\016\103\025\257\026\073\027" +
    "\112\030\053\033\055\053\130\056\070\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\236\001\001\000\030\015\105\016\103\025\242\026\073" +
    "\027\112\030\053\033\055\034\243\035\244\053\130\056" +
    "\070\001\001\000\012\015\232\030\053\033\055\053\230" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\045" +
    "\117\046\227\047\124\054\122\056\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\015\105\016\103\025" +
    "\222\026\073\027\112\030\053\033\055\053\130\056\070" +
    "\001\001\000\014\045\117\046\121\047\124\054\122\056" +
    "\125\001\001\000\014\045\117\046\221\047\124\054\122" +
    "\056\125\001\001\000\012\017\010\021\026\022\012\024" +
    "\212\001\001\000\002\001\001\000\014\045\117\046\211" +
    "\047\124\054\122\056\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\045\117\046\207\047\124\054\122" +
    "\056\125\001\001\000\024\015\105\016\103\025\176\026" +
    "\073\027\112\030\053\033\055\053\130\056\070\001\001" +
    "\000\030\015\105\016\103\025\133\026\073\027\112\030" +
    "\053\031\134\032\132\033\055\053\130\056\070\001\001" +
    "\000\002\001\001\000\014\045\117\046\121\047\124\054" +
    "\122\056\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\105\016\103\025\172\026\073\027\112\030\053" +
    "\033\055\053\130\056\070\001\001\000\024\015\105\016" +
    "\103\025\171\026\073\027\112\030\053\033\055\053\130" +
    "\056\070\001\001\000\024\015\105\016\103\025\170\026" +
    "\073\027\112\030\053\033\055\053\130\056\070\001\001" +
    "\000\024\015\105\016\103\025\167\026\073\027\112\030" +
    "\053\033\055\053\130\056\070\001\001\000\024\015\105" +
    "\016\103\025\166\026\073\027\112\030\053\033\055\053" +
    "\130\056\070\001\001\000\024\015\105\016\103\025\165" +
    "\026\073\027\112\030\053\033\055\053\130\056\070\001" +
    "\001\000\024\015\105\016\103\025\164\026\073\027\112" +
    "\030\053\033\055\053\130\056\070\001\001\000\024\015" +
    "\105\016\103\025\163\026\073\027\112\030\053\033\055" +
    "\053\130\056\070\001\001\000\024\015\105\016\103\025" +
    "\162\026\073\027\112\030\053\033\055\053\130\056\070" +
    "\001\001\000\024\015\105\016\103\025\161\026\073\027" +
    "\112\030\053\033\055\053\130\056\070\001\001\000\024" +
    "\015\105\016\103\025\160\026\073\027\112\030\053\033" +
    "\055\053\130\056\070\001\001\000\024\015\105\016\103" +
    "\025\157\026\073\027\112\030\053\033\055\053\130\056" +
    "\070\001\001\000\024\015\105\016\103\025\156\026\073" +
    "\027\112\030\053\033\055\053\130\056\070\001\001\000" +
    "\024\015\105\016\103\025\155\026\073\027\112\030\053" +
    "\033\055\053\130\056\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\105\016\103\025\174\026\073\027\112\030\053" +
    "\033\055\053\130\056\070\001\001\000\002\001\001\000" +
    "\024\015\105\016\103\025\205\026\073\027\112\030\053" +
    "\033\055\053\130\056\070\001\001\000\002\001\001\000" +
    "\024\015\105\016\103\025\202\026\073\027\112\030\053" +
    "\033\055\053\130\056\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\010\215\015\105\016\103\025" +
    "\216\026\073\027\112\030\053\033\055\053\130\056\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\015" +
    "\105\016\103\025\220\026\073\027\112\030\053\033\055" +
    "\053\130\056\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\105" +
    "\016\103\025\225\026\073\027\112\030\053\033\055\053" +
    "\130\056\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\045\117\046" +
    "\121\047\124\054\122\056\125\001\001\000\004\054\236" +
    "\001\001\000\030\015\105\016\103\025\133\026\073\027" +
    "\112\030\053\031\234\032\132\033\055\053\130\056\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\045" +
    "\117\047\241\054\122\056\125\001\001\000\024\015\105" +
    "\016\103\025\240\026\073\027\112\030\053\033\055\053" +
    "\130\056\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\105\016\103\025\246\026\073\027\112\030\053" +
    "\033\055\053\130\056\070\001\001\000\002\001\001\000" +
    "\024\015\105\016\103\025\250\026\073\027\112\030\053" +
    "\033\055\053\130\056\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\015\105\016\103\025\253\026\073" +
    "\027\112\030\053\033\055\053\130\056\070\001\001\000" +
    "\002\001\001\000\026\010\255\015\105\016\103\025\216" +
    "\026\073\027\112\030\053\033\055\053\130\056\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\007\261\015\105\016\103\025\077\026\073\027" +
    "\112\030\053\033\055\041\057\044\074\050\114\051\104" +
    "\053\102\055\064\056\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\007\261\015\105\016\103\025\077\026\073\027\112\030" +
    "\053\033\055\041\057\042\266\044\074\050\114\051\104" +
    "\053\102\055\064\056\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\100\011\066\015\105\016\103\017\010\021\026\022\012" +
    "\024\024\025\077\026\073\027\112\030\053\033\055\041" +
    "\057\044\074\050\114\051\104\053\102\055\064\056\070" +
    "\060\276\061\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\015\105\016\103\025\302" +
    "\026\073\027\112\030\053\033\055\053\130\056\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\305" +
    "\001\001\000\042\007\261\015\105\016\103\025\077\026" +
    "\073\027\112\030\053\033\055\041\057\044\074\050\114" +
    "\051\104\052\306\053\102\055\064\056\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\311\001\001" +
    "\000\040\007\261\015\105\016\103\025\077\026\073\027" +
    "\112\030\053\033\055\041\057\044\074\050\114\051\104" +
    "\053\102\055\064\056\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\017\326" +
    "\021\026\022\012\036\327\037\325\040\330\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\017\326\021\026\022\012" +
    "\040\336\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\017\326\021\026\022\012\036\341\037\325\040\330" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\007" +
    "\100\011\066\015\105\016\103\017\010\021\026\022\012" +
    "\024\024\025\077\026\073\027\112\030\053\033\055\041" +
    "\057\044\074\050\114\051\104\053\102\055\064\056\070" +
    "\060\344\061\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\350\021\026\022\012\023\352\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\354\004\003\011\017\012\015" +
    "\013\022\014\030\017\010\021\026\022\012\024\024\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public Boolean syntaxErrors = false;

  public void syntax_error(Symbol current_token) {
    report_error("Syntax error at line " + (current_token.left+1) + ", column "
        + current_token.right, null
    );
    syntaxErrors = true;
  }

  public void unrecovered_syntax_error(Symbol current_token) {
    if(!syntaxErrors) {
      report_error("Syntax error at line " + (current_token.left+1) + ", column "
          + current_token.right, null
      );
      syntaxErrors = true;
    }
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= declarations main declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main ::= MAIN LBRACE body RBRACE SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= statements statement 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statements",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= io_op SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= return SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= expression SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= settable ASSIGNMENT multiple_assignments SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= loop 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarations ::= declaration SEMICOLON declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // body ::= variable_declarations 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // body ::= statement statements 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variable_declarations ::= variable_declaration SEMICOLON body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declarations",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaration ::= function_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaration ::= variable_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaration ::= alias_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaration ::= type_declaration 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_declaration ::= FDEF IDENTIFIER LPAREN type_id_contents RPAREN LBRACE body RBRACE COLON ftype 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variable_declaration ::= IDENTIFIER COLON type_with_id ASSIGNMENT multiple_assignments 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_declaration ::= type_with_id IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // multiple_assignments ::= multiple_assignments COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // multiple_assignments ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("multiple_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type_declaration ::= TDEF IDENTIFIER LBRACE type_id_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // alias_declaration ::= ALIAS type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("alias_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= evaluable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= slice 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= settable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= collection 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // slice ::= LBRACKET expression COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // slice ::= LBRACKET COLON expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // slice ::= LBRACKET expression COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // slice ::= LBRACKET COLON RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("slice",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // settable ::= IDENTIFIER access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // settable ::= collection index_access access_main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("settable",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // access ::= access_main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // access ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // access_main ::= dot_access access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_main",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // access_main ::= index_access access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_main",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // access_main ::= slice access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("access_main",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dot_access ::= DOT IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dot_access",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // index_access ::= LBRACKET expression RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_access",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // item ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // item ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // item ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // item ::= RATIONAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // item ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("item",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // collection ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // collection ::= dict_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // collection ::= sequence_start 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("collection",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // evaluable ::= NOT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // evaluable ::= LEN LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // evaluable ::= MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // evaluable ::= LPAREN expression RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // evaluable ::= function_call access 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // evaluable ::= expression AND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // evaluable ::= expression DIV expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // evaluable ::= expression EQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // evaluable ::= expression IN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // evaluable ::= expression LANGLE expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // evaluable ::= expression LTEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // evaluable ::= expression MINUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // evaluable ::= expression MULT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // evaluable ::= expression NEQ expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // evaluable ::= expression OR expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // evaluable ::= expression PLUS expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // evaluable ::= expression POW expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // evaluable ::= expression APPEND expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // evaluable ::= expression IMPLY expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // evaluable ::= item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("evaluable",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type ::= BOOLEAN_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type ::= dict_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= INT_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= RATIONAL_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // type ::= sequence_t 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type ::= STRING_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ftype ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ftype ::= VOID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ftype ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ftype",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // type_with_id ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // type_with_id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_id",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // type_with_top_id ::= TOP_T 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // type_with_top_id ::= type 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // type_with_top_id ::= IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_with_top_id",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_call ::= IDENTIFIER LPAREN sequence_contents RPAREN SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_call",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sequence_t ::= SEQ_T LANGLE type_with_top_id RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sequence_t ::= SEQ_T LANGLE IDENTIFIER RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_t",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sequence_start ::= LBRACKET sequence_contents RBRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_start",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sequence_contents ::= sequence_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sequence_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_contents",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // sequence_body ::= expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // sequence_body ::= sequence_body COMMA expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sequence_body",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // dict_t ::= DICT_T LANGLE type_with_top_id COMMA type_with_top_id RANGLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_t",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // dict_start ::= LBRACE dict_contents RBRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_start",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // dict_contents ::= dict_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // dict_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_contents",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // dict_body ::= expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // dict_body ::= dict_body COMMA expression COLON expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dict_body",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type_id_contents ::= type_id_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type_id_contents ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_contents",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type_id_body ::= type_id_body COMMA type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type_id_body ::= type_id 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id_body",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type_id ::= type IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // type_id ::= IDENTIFIER IDENTIFIER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_id",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // loop ::= LOOP statements break POOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("loop",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // break ::= BREAK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // break ::= BREAKARG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // break ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("break",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // if ::= predicate IF LPAREN expression RPAREN THEN statements else 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // else ::= ELSE statements FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // else ::= FI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // predicate ::= QMARK expression QMARK 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // predicate ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predicate",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // return ::= RETURN expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // return ::= RETURN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("return",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // io_op ::= PRINT expression 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // io_op ::= READ settable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("io_op",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
